Db1 = as(Db,'tidLists') # convert to vertical data layout (item-TID_set)
inspect(Db1)
Rules = apriori(Db, parameter = list(support = 0.6, confidence = 0.75, target = "rules"))
inspect(Rules)
#   Min Support as 0.6, confidence as 0.75.
#   Adjust Right Hand Side (rhs) and Left Hand Side (lhs)
AssocRules = apriori(Db, parameter = list(support = 0.6, confidence = 0.75, target = "association rules"))
assoc = apriori(Db, parameter = list(support = 0.6, confidence = 0.75, target = "assoc"))
inspect(assoc)
assocRules = apriori(Db, parameter = list(support = 0.6, confidence = 0.75, target = "association rules"))
assocRules = apriori(Db, parameter = list(support = 0.6, confidence = 0.75, target = "association rules"))
#   Clean environment
rm(list = ls())
Db = list(c("M","O","N","K","E","Y"), c("D","O","N","K","E","Y"),
c("M", "A", "K", "E"), c("M", "U", "C", "K", "Y"), c("C", "O", "K", "I", "E"))
assocRules = apriori(Db, parameter = list(support = 0.6, confidence = 0.75, target = "association rules"))
Db = as(Db,'transactions') # convert to TID-itemset format (transaction)
inspect(Db) # display the dataset
Db1 = as(Db,'tidLists') # convert to vertical data layout (item-TID_set)
inspect(Db1)
as(Db,'matrix') # convert to matrix format
FreqItems = apriori(Db, parameter = list(support = 0.6, target = "frequent itemsets"))
assocRules = apriori(Db, parameter = list(support = 0.6, confidence = 0.75, target = "association rules"))
test = apriori(Db, parameter = list(support = 0.6, confidence = 0.75, target = "test"))
Rules = apriori(Db, parameter = list(support = 0.6, confidence = 0.75, target = "rules"))
Assoc = apriori(Db, parameter = list(support = 0.6, confidence = 0.75, target = "strong associations"))
Assoc = apriori(Db, parameter = list(support = 0.6, confidence = 0.75, target = "associations"))
inspect(Assoc)
#   Clean environment
rm(list = ls())
#   Uninstall packages
p_unload(all)
#   Remove plots
dev.off()  # do only if a plot exists
#   Clear the console
cat("\014")   # command shortcut ctrl+L
Db = list(c("M","O","N","K","E","Y"), c("D","O","N","K","E","Y"),
c("M", "A", "K", "E"), c("M", "U", "C", "K", "Y"), c("C", "O", "K", "I", "E"))
Assoc = apriori(Db, parameter = list(support = 0.6, confidence = 0.75, target = "associations"))
Assoc = apriori(Db, parameter = list(support = 0.6, confidence = 0.75, target = "assoc"))
Rules = apriori(Db, parameter = list(support = 0.6, confidence = 0.75, target = "rules"))
Rules = apriori(Db, parameter = list(support = 0.6, confidence = 0.75, target = "assoc rules"))
inspect(Rules)
#   Clean environment
rm(list = ls())
#   Uninstall packages
p_unload(all)
#   Remove plots
dev.off()  # do only if a plot exists
#   Clear the console
cat("\014")   # command shortcut ctrl+L
install.packages("arules")
install.packages("arules")
library(arules)
#   Clean environment
rm(list = ls())
#   Uninstall packages
p_unload(all)
#   Load more packages with pacman
pacman::p_load(pacman, arules)
p1-Db = list(c("M","O","N","K","E","Y"), c("D","O","N","K","E","Y"),
c("M", "A", "K", "E"), c("M", "U", "C", "K", "Y"), c("C", "O", "K", "I", "E"))
p1.Db = list(c("M","O","N","K","E","Y"), c("D","O","N","K","E","Y"),
c("M", "A", "K", "E"), c("M", "U", "C", "K", "Y"), c("C", "O", "K", "I", "E"))
p1.Db = as(p1.Db,'transactions') # convert to TID-itemset format (transaction)
inspect(p1.Db) # display the dataset
p1.Db1 = as(p1.Db,'tidLists') # convert to vertical data layout (item-TID_set)
inspect(p1.Db1)
as(p1.Db,'matrix') # convert to matrix format
FreqItems = apriori(p1.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inpspect(FreqItems)
print(FreqItems)
inpspect(FreqItems[2:3])
#   Clean environment
rm(list = ls())
p1.Db = list(c("M","O","N","K","E","Y"), c("D","O","N","K","E","Y"),
c("M", "A", "K", "E"), c("M", "U", "C", "K", "Y"), c("C", "O", "K", "I", "E"))
#   Load more packages with pacman
pacman::p_load(pacman, arules)
#   Clean environment
rm(list = ls())
#   Uninstall packages
p_unload(all)
#   Load more packages with pacman
pacman::p_load(pacman, arules)
p1.Db = list(c("M","O","N","K","E","Y"), c("D","O","N","K","E","Y"),
c("M", "A", "K", "E"), c("M", "U", "C", "K", "Y"), c("C", "O", "K", "I", "E"))
p1.Db = as(p1.Db,'transactions') # convert to TID-itemset format (transaction)
inspect(p1.Db) # display the dataset
#   Clean environment
rm(list = ls())
#   Load more packages with pacman
pacman::p_load(pacman, arules)
p1Db = list(c("M","O","N","K","E","Y"), c("D","O","N","K","E","Y"),
c("M", "A", "K", "E"), c("M", "U", "C", "K", "Y"), c("C", "O", "K", "I", "E"))
p1Db = as(p1Db,'transactions') # convert to TID-itemset format (transaction)
inspect(p1Db) # display the dataset
#   Clean environment
rm(list = ls())
#   Uninstall packages
p_unload(all)
#   Remove plots
dev.off()  # do only if a plot exists
#   Clear the console
cat("\014")   # command shortcut ctrl+L
#   Load more packages with pacman
pacman::p_load(pacman, arules)
Db = list(c("M","O","N","K","E","Y"), c("D","O","N","K","E","Y"),
c("M", "A", "K", "E"), c("M", "U", "C", "K", "Y"), c("C", "O", "K", "I", "E"))
#   convert to TID-itemset format (transaction)
Db = as(Db,'transactions')
# display the dataset
inspect(Db)
library(arules)
Db = list(c("M","O","N","K","E","Y"), c("D","O","N","K","E","Y"),
c("M", "A", "K", "E"), c("M", "U", "C", "K", "Y"), c("C", "O", "K", "I", "E"))
#   Clean environment
rm(list = ls())
#   Uninstall packages
p_unload(all)
#   Clear the console
cat("\014")   # command shortcut ctrl+L
library(arules)
Db = list(c("M","O","N","K","E","Y"), c("D","O","N","K","E","Y"), c("M", "A", "K", "E"), c("M", "U", "C", "K", "Y"), c("C", "O", "K", "I", "E"))
#   convert to TID-itemset format (transaction)
Db = as(Db,'transactions')
# display the dataset
inspect(Db)
FreqItems = apriori(Db, parameter = list(support = 0.6, target = "frequent itemsets"))
#   Load packages with pacman
pacman::p_load(pacman, arules)
Db = list(c("M","O","N","K","E","Y"), c("D","O","N","K","E","Y"), c("M", "A", "K", "E"), c("M", "U", "C", "K", "Y"), c("C", "O", "K", "I", "E"))
#   convert to TID-itemset format (transaction)
Db = as(Db,'transactions')
# display the dataset
inspect(Db)
#   Clean environment
rm(list = ls())
#   Uninstall packages
p_unload(all)
#   Clear the console
cat("\014")   # command shortcut ctrl+L
#   convert to TID-itemset format (transaction)
Db = as(Db,'transactions')
# display the dataset
inspect(Db)
FreqItems = apriori(Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inpspect(FreqItems[2:3])
inpspect(FreqItems[0:3])
inpspect(FreqItems)
FreqItems = apriori(Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(FreqItems)
AssocRules = apriori(p1.Db, parameter = list(support = 0.6, confidence = 0.75, target = "rules"))
#   Clean environment
rm(list = ls())
#   Clear the console
cat("\014")   # command shortcut ctrl+L
p1.Db = list(c("M","O","N","K","E","Y"), c("D","O","N","K","E","Y"), c("M", "A", "K", "E"), c("M", "U", "C", "K", "Y"), c("C", "O", "K", "I", "E"))
#   convert to TID-itemset format (transaction)
p1.Db = as(p1.Db,'transactions')
# display the dataset
inspect(p1.Db)
FreqItems = apriori(p1.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(FreqItems)
#   Clean environment
rm(list = ls())
#   Clear the console
cat("\014")   # command shortcut ctrl+L
p1.Db = list(c("M","O","N","K","E","Y"), c("D","O","N","K","E","Y"), c("M", "A", "K", "E"), c("M", "U", "C", "K", "Y"), c("C", "O", "K", "I", "E"))
#   convert to TID-itemset format (transaction)
p1.Db = as(p1.Db,'transactions')
# display the dataset
inspect(p1.Db)
p1.FreqItems = apriori(p1.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(FreqItems)
inspect(p1.FreqItems)
p1.AssocRules = apriori(p1.Db, parameter = list(support = 0.6, confidence = 0.75, target = "rules"))
inspect(p1.AssocRules)
# Closed Frequent Patterns
inspect(p1.FreqItems[is.closed(p1.FreqItems)])
# Maximal Frequent Patterns
inspect(p1.FreqItems[is.maximal(p1.FreqItems)])
inspect(p1.AssocRules[9:12])
p2.Db = list(c("Crab","Milk","Cheese","Bread"), c("Cheese","Milk","Apple", "Pie", "Bread"),
c("Apple", "Milk", "Bread", "Pie"), c("Bread", "Milk", "Cheese"))
#   convert to TID-itemset format (transaction)
p2.Db = as(p2.Db,'transactions')
# display the dataset
inspect(p2.Db)
p2.FreqItems = apriori(p2.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(p1.FreqItems)
p1.AssocRules = apriori(p1.Db, parameter = list(support = 0.6, confidence = 0.8, target = "rules"))
inspect(p1.AssocRules[9:12])
p2.AssocRules = apriori(p2.Db, parameter = list(support = 0.6, confidence = 0.8, target = "rules"))
inspect(p2.AssocRules[9:12])
inspect(p2.AssocRules)
inspect(p1.AssocRules[9:12])
p1.AssocRules = apriori(p1.Db, parameter = list(support = 0.6, confidence = 0.75, target = "rules"))
inspect(p1.AssocRules[9:12])
inspect(p1.AssocRules[10:12])
p2.FreqItems = apriori(p2.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(p1.FreqItems)
#   Clear the console
cat("\014")   # command shortcut ctrl+L
p2.Db = list(c("Crab","Milk","Cheese","Bread"), c("Cheese","Milk","Apple", "Pie", "Bread"),
c("Apple", "Milk", "Bread", "Pie"), c("Bread", "Milk", "Cheese"))
#   convert to TID-itemset format (transaction)
p2.Db = as(p2.Db,'transactions')
# display the dataset
inspect(p2.Db)
p2.FreqItems = apriori(p2.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(p1.FreqItems)
#   Clear the console
cat("\014")   # command shortcut ctrl+L
p2.Db = list(c("Crab","Milk","Cheese","Bread"), c("Cheese","Milk","Apple", "Pie", "Bread"),
c("Apple", "Milk", "Bread", "Pie"), c("Bread", "Milk", "Cheese"))
#   convert to TID-itemset format (transaction)
p2.Db = as(p2.Db,'transactions')
# display the dataset
inspect(p2.Db)
p2.FreqItems = apriori(p2.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(p2.FreqItems)
p2.AssocRules = apriori(p2.Db, parameter = list(support = 0.6, confidence = 0.8, target = "rules"))
inspect(p2.AssocRules)
inspect(p2.AssocRules[8:9])
inspect(p2.AssocRules[7:8])
p3.FreqItems = apriori(p3.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
p3.Db = list(c("Fish","Milk","Cheese","Bread", "Tea", "!Coffee", "!Meat"), c("Fish", "Apple", "Pie", "Bread", "!Coffee", "!Meat"),
c("Meat", "Milk", "Bread", "Coffee", "!Tea", "!Fish"), c("Meat", "Bread", "Milk", "Cheese", "!Tea", "!Fish"))
p3.FreqItems = apriori(p3.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(p3.FreqItems)
#   convert to TID-itemset format (transaction)
p3.Db = as(p3.Db,'transactions')
# display the dataset
inspect(p3.Db)
p3.FreqItems = apriori(p3.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(p3.FreqItems)
get.neg.rules <- function(transactions, itemList, support, confidence){
# Generate negative association rules for given support confidence value
#
# Args:
# transactions: Transaction object, list of transactions
# itemList : list of items to be negated in the transactions
# support: Minimum support threshold
# confidence: Minimum confidence threshold
# Returns:
# A data frame with the best set negative rules and their support and confidence values
neg.transactions <- addComplement( transactions.obj, labels = itemList)
rules <- find.rules(neg.transactions, support, confidence)
return(rules)
}
get.neg.rules <- function(transactions, itemList, support, confidence){
# Generate negative association rules for given support confidence value
#
# Args:
# transactions: Transaction object, list of transactions
# itemList : list of items to be negated in the transactions
# support: Minimum support threshold
# confidence: Minimum confidence threshold
# Returns:
# A data frame with the best set negative rules and their support and confidence values
neg.transactions <- addComplement(p3.Db, labels = itemList)
rules <- find.rules(neg.transactions, support, confidence)
return(rules)
}
neg.transactions <- addComplement(p3.Db, labels = itemList)
get.neg.rules <- function(transactions, itemList, support, confidence){
# Generate negative association rules for given support confidence value
#
# Args:
# transactions: Transaction object, list of transactions
# itemList : list of items to be negated in the transactions
# support: Minimum support threshold
# confidence: Minimum confidence threshold
# Returns:
# A data frame with the best set negative rules and their support and confidence values
neg.transactions <- addComplement( transactions.obj, labels = itemList)
rules <- find.rules(neg.transactions, support, confidence)
return(rules)
}
neg.rules <- get.neg.rules(transactions.obj, p3.Db, .05,.6)
inspect(p3.FreqItems)
# display the dataset
inspect(p3.Db)
transactions = list(c("Banana", "Strawberries", "Onions", "Ginger", "Garlic", "Milk", "Banana"),
c("Banana", "Strawberries", "Onions", "Ginger", "Garlic", "!Banana", "Milk", "Banana"))
get.neg.rules <- function(transactions, itemList, support, confidence){
# Generate negative association rules for given support confidence value
#
# Args:
# transactions: Transaction object, list of transactions
# itemList : list of items to be negated in the transactions
# support: Minimum support threshold
# confidence: Minimum confidence threshold
# Returns:
# A data frame with the best set negative rules and their support and confidence values
neg.transactions <- addComplement( transactions.obj, labels = itemList)
rules <- find.rules(neg.transactions, support, confidence)
return(rules)
}
itemList <- c("Organic Whole Milk","Cucumber Kirby")
neg.rules <- get.neg.rules(transactions.obj,itemList, .05,.6)
subset(p2.AssocRules, subset = lift < 1)
subset(p1.AssocRules, subset = lift < 1)
p2.Db = list(c("Fish", "Milk", "Cheese", "Bread", "Tea", "!Coffee", "!Meat"), c("Fish", "Cheese", "Milk", "Apple", "Pie", "Bread", "!Coffee", "!Meat"),
c("Meat", "Apple", "Milk", "Bread", "Pie", "!Tea", "Coffee", "!Fish"), c("Meat", "Bread", "Milk", "Cheese", "!Tea", "Coffee", "!Fish"))
p2.Db = list(c("Crab","Milk","Cheese","Bread"), c("Cheese","Milk","Apple", "Pie", "Bread"),
c("Apple", "Milk", "Bread", "Pie"), c("Bread", "Milk", "Cheese"))
p3.Db = list(c("Fish", "Milk", "Cheese", "Bread", "Tea", "!Coffee", "!Meat"), c("Fish", "Cheese", "Milk", "Apple", "Pie", "Bread", "!Coffee", "!Meat"),
c("Meat", "Apple", "Milk", "Bread", "Pie", "!Tea", "Coffee", "!Fish"), c("Meat", "Bread", "Milk", "Cheese", "!Tea", "Coffee", "!Fish"))
#   convert to TID-itemset format (transaction)
p3.Db = as(p3.Db,'transactions')
# display the dataset
inspect(p3.Db)
subset(p2.AssocRules, subset = lift < 1)
p3.FreqItems = apriori(p3.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(p3.FreqItems)
p3.AssocRules = apriori(p3.Db, parameter = list(support = 0.6, confidence = 0.8, target = "rules"))
inspect(p3.AssocRules)
View(p3.AssocRules)
View(p3.AssocRules)
subset(p2.AssocRules, subset = lift < 1)
subset(p3.AssocRules, subset = lift < 1)
inspect(head(sort(p2.AssocRules, by=c("supp", "conf"))))
inspect(head(sort(p3.AssocRules, by=c("supp", "conf")))
inspect(head(sort(p3.AssocRules, by=c("supp", "conf"))))
p3.Db = list(c("Fish", "Milk", "Cheese", "Bread", "Tea", "!Coffee", "!Meat"), c("Fish", "Cheese", "Milk", "Apple", "Pie", "Bread", "!Coffee", "!Meat"),
c("Meat", "Apple", "Milk", "Bread", "Pie", "!Tea", "Coffee", "!Fish"), c("Meat", "Bread", "Milk", "Cheese", "!Tea", "Coffee", "!Fish"))
#   convert to TID-itemset format (transaction)
p3.Db = as(p3.Db,'transactions')
# display the dataset
inspect(p3.Db)
p3.FreqItems = apriori(p3.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(p3.FreqItems)
p3.AssocRules = apriori(p3.Db, parameter = list(support = 0.6, confidence = 0.8, target = "rules"))
inspect(head(sort(p3.AssocRules, by=c("supp", "conf"))))
inspect(head(sort(p2.AssocRules, by=c("supp", "conf"))))
inspect(head(sort(p1.AssocRules, by=c("supp", "conf"))))
?lift
p3.Db = list(c("Fish", "Milk", "Cheese", "Bread", "Tea"), c("Meat", "Cheese", "Milk", "Apple", "Pie", "Bread", "Coffee"),
c("Meat", "Apple", "Milk", "Bread", "Pie", "Tea"), c("Fish", "Bread", "Milk", "Cheese", "Coffee"))
#   convert to TID-itemset format (transaction)
p3.Db = as(p3.Db,'transactions')
# display the dataset
inspect(p3.Db)
p3.FreqItems = apriori(p3.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(p3.FreqItems)
p3.AssocRules = apriori(p3.Db, parameter = list(support = 0.6, confidence = 0.8, target = "rules"))
inspect(head(sort(p3.AssocRules, by=c("supp", "conf"))))
inspect(p3.FreqItems)
p3.Db = list(c("Fish","Milk","Cheese", "Bread", "Meat", "Coffee"), c("Fish", "Cheese","Milk","Apple", "Pie", "Bread", "Tea"),
c("Meat", "Apple", "Milk", "Bread", "Pie", "Tea"), c("Fish", "Bread", "Milk", "Cheese", "Coffee"))
#   convert to TID-itemset format (transaction)
p3.Db = as(p3.Db,'transactions')
# display the dataset
inspect(p3.Db)
p3.FreqItems = apriori(p3.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(p3.FreqItems)
p3.AssocRules = apriori(p3.Db, parameter = list(support = 0.6, confidence = 0.8, target = "rules"))
inspect(head(sort(p3.AssocRules, by=c("supp", "conf"))))
p3.Db = list(c("Fish","Milk","Cheese", "Bread", "Meat", "Coffee"), c("Fish", "Cheese","Milk","Apple", "Pie", "Bread", "Tea"),
c("Meat", "Apple", "Milk", "Bread", "Pie", "Tea"), c("Fish", "Bread", "Milk", "Cheese", "Coffee"), c("Tea", "Fish"), c("Coffee", "Meat"))
#   convert to TID-itemset format (transaction)
p3.Db = as(p3.Db,'transactions')
#   convert to TID-itemset format (transaction)
p3.Db = as(p3.Db,'transactions')
# display the dataset
inspect(p3.Db)
p3.FreqItems = apriori(p3.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(p3.FreqItems)
p3.AssocRules = apriori(p3.Db, parameter = list(support = 0.6, confidence = 0.8, target = "rules"))
inspect(head(sort(p3.AssocRules, by=c("supp", "conf"))))
p3.Db = list(c("Meat","Eggs", "Milk", "Cheese", "Coffee"),
c("Fish", "Vegetables", "Bread", "Fruit", "Tea"),
c("Meat", "Fish", "Vegetables", "Bread", "Fruit", "Tea", "Coffee"),
c("Vegetables", "Fruit", "Tea"),
c("Meat", "Chees", "Eggs"),
c("Meat","Eggs", "Milk", "Cheese", "Coffee", "Fish", "Vegetables", "Bread", "Fruit", "Tea"))
#   convert to TID-itemset format (transaction)
p3.Db = as(p3.Db,'transactions')
# display the dataset
inspect(p3.Db)
p3.FreqItems = apriori(p3.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(p3.FreqItems)
p3.AssocRules = apriori(p3.Db, parameter = list(support = 0.6, confidence = 0.8, target = "rules"))
inspect(head(sort(p3.AssocRules, by=c("supp", "conf"))))
p3.Db = list(c("Meat","Eggs", "Milk", "Cheese", "Coffee"),
c("Fish", "Vegetables", "Bread", "Fruit", "Tea"),
c("Meat", "Fish", "Vegetables", "Bread", "Fruit", "Tea", "Coffee"),
c("Vegetables", "Tea"),
c("Meat", "Coffee"),
c("Meat","Eggs", "Milk", "Cheese", "Coffee", "Fish", "Vegetables", "Bread", "Fruit", "Tea"))
#   convert to TID-itemset format (transaction)
p3.Db = as(p3.Db,'transactions')
# display the dataset
inspect(p3.Db)
p3.FreqItems = apriori(p3.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(p3.FreqItems)
p3.AssocRules = apriori(p3.Db, parameter = list(support = 0.6, confidence = 0.8, target = "rules"))
inspect(head(sort(p3.AssocRules, by=c("supp", "conf"))))
p3.Db = list(c("Meat","Eggs", "Milk", "Cheese", "Coffee"),
c("Fish", "Vegetables", "Bread", "Fruit", "Tea"),
c("Meat","Eggs", "Milk", "Cheese", "Coffee", "Fish", "Vegetables", "Bread", "Fruit", "Tea"))
#   convert to TID-itemset format (transaction)
p3.Db = as(p3.Db,'transactions')
# display the dataset
inspect(p3.Db)
p3.FreqItems = apriori(p3.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(p3.FreqItems)
p3.AssocRules = apriori(p3.Db, parameter = list(support = 0.6, confidence = 0.8, target = "rules"))
inspect(head(sort(p3.AssocRules, by=c("supp", "conf"))))
p3.Db = list(c("Meat","Eggs"),
c("Fruit", "Vegetables"),
c("Meat","Eggs", "Fruit", "Vegetables"))
#   convert to TID-itemset format (transaction)
p3.Db = as(p3.Db,'transactions')
# display the dataset
inspect(p3.Db)
p3.FreqItems = apriori(p3.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(p3.FreqItems)
p3.AssocRules = apriori(p3.Db, parameter = list(support = 0.6, confidence = 0.8, target = "rules"))
inspect(head(sort(p3.AssocRules, by=c("supp", "conf"))))
p3.AssocRules = apriori(p3.Db, parameter = list(support = 0.6, confidence = 0.75, target = "rules"))
inspect(head(sort(p3.AssocRules, by=c("supp", "conf"))))
data(Adult)
head(Adult)
inspect(Adult)
inspect(Adult)
AdultFreqItems = apriori(Adult, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(AdultFreqItems)
Adult.FreqItems = apriori(Adult, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(Adult.FreqItems)
Adult.AssocRules = apriori(Adult, parameter = list(support = 0.6, confidence = 0.75, target = "rules"))
inspect(Adult.AssocRules)
inspect(head(sort(Adult.AssocRules, by=c("supp", "conf"))))
p1.Db = list(c("M","O","N","K","E","Y"), c("D","O","N","K","E","Y"),
c("M", "A", "K", "E"), c("M", "U", "C", "K", "Y"), c("C", "O", "K", "I", "E"))
#   Clean environment
rm(list = ls())
#   Remove plots
dev.off()  # do only if a plot exists
#   Clear the console
cat("\014")   # command shortcut ctrl+L
p1.Db = list(c("M","O","N","K","E","Y"), c("D","O","N","K","E","Y"),
c("M", "A", "K", "E"), c("M", "U", "C", "K", "Y"), c("C", "O", "K", "I", "E"))
#   convert to TID-itemset format (transaction)
p1.Db = as(p1.Db,'transactions')
# display the dataset
inspect(p1.Db)
p1.FreqItems = apriori(p1.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(p1.FreqItems)
p1.AssocRules = apriori(p1.Db, parameter = list(support = 0.6, confidence = 0.75, target = "rules"))
#   Get last Left Hand Side with two attributes
inspect(p1.AssocRules[10:12])
# Closed Frequent Patterns
inspect(p1.FreqItems[is.closed(p1.FreqItems)])
# Maximal Frequent Patterns
inspect(p1.FreqItems[is.maximal(p1.FreqItems)])
#   Clear the console
cat("\014")   # command shortcut ctrl+L
p1.Db = list(c("M","O","N","K","E","Y"), c("D","O","N","K","E","Y"),
c("M", "A", "K", "E"), c("M", "U", "C", "K", "Y"), c("C", "O", "K", "I", "E"))
#   convert to TID-itemset format (transaction)
p1.Db = as(p1.Db,'transactions')
# display the dataset
inspect(p1.Db)
p1.FreqItems = apriori(p1.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(p1.FreqItems)
p1.AssocRules = apriori(p1.Db, parameter = list(support = 0.6, confidence = 0.75, target = "rules"))
#   Get last Left Hand Side with two attributes
inspect(p1.AssocRules[10:12])
#   Clear the console
cat("\014")   # command shortcut ctrl+L
inspect(p1.FreqItems)
#   Get last Left Hand Side with two attributes
inspect(p1.AssocRules[10:12])
# Closed Frequent Patterns
inspect(p1.FreqItems[is.closed(p1.FreqItems)])
# Maximal Frequent Patterns
inspect(p1.FreqItems[is.maximal(p1.FreqItems)])
p2.Db = list(c("Crab","Milk","Cheese","Bread"), c("Cheese","Milk","Apple", "Pie", "Bread"),
c("Apple", "Milk", "Bread", "Pie"), c("Bread", "Milk", "Cheese"))
#   convert to TID-itemset format (transaction)
p2.Db = as(p2.Db,'transactions')
# display the dataset
inspect(p2.Db)
p2.Db = list(c("Crab","Milk","Cheese","Bread"), c("Cheese","Milk","Apple", "Pie", "Bread"),
c("Apple", "Milk", "Bread", "Pie"), c("Bread", "Milk", "Cheese"))
#   convert to TID-itemset format (transaction)
p2.Db = as(p2.Db,'transactions')
# display the dataset
inspect(p2.Db)
p2.FreqItems = apriori(p2.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(p2.FreqItems)
p2.AssocRules = apriori(p2.Db, parameter = list(support = 0.6, confidence = 0.8, target = "rules"))
#   Get last Left Hand Side with two attributes
inspect(p2.AssocRules[7:8])
#   Clear the console
cat("\014")   # command shortcut ctrl+L
inspect(p2.FreqItems)
#   Get last Left Hand Side with two attributes
inspect(p2.AssocRules[7:8])
#   Clear the console
cat("\014")   # command shortcut ctrl+L
data(Adult)
head(Adult)
Adult.FreqItems = apriori(Adult, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(Adult.FreqItems)
inspect(Adult.AssocRules)
Adult.AssocRules = apriori(Adult, parameter = list(support = 0.6, confidence = 0.75, target = "rules"))
inspect(Adult.AssocRules)
inspect(head(sort(Adult.AssocRules, by=c("supp", "conf"))))
