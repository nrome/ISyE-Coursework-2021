# Example Data
x = sample(200, 600, 300, 800, 1000)
#   Load packages with pacman
pacman::p_load(pacman, dplyr, ggplot2,forecast, scico, rio, tidyverse, tidyr, lsa)
# Example Data
x <- c(200, 600, 300, 800, 1000)
df <- data.frame (x)
df %>%
group_by(y) %>%
mutate(xnorm = (x - min(x)) / (max(x) - min(x))) %>%
ungroup()
df %>%
group_by(x) %>%
mutate(xnorm = (x - min(x)) / (max(x) - min(x))) %>%
ungroup()
mmnorm(x,minval=0,maxval=1)
#   Load packages with pacman
pacman::p_load(pacman, dplyr, ggplot2,forecast, scico, rio, tidyverse, tidyr, lsa, dprep)
return((x-min(x))/(max(x)-min(x)))
dt[x] <- normalize(rank(dt[x]))
#define Min-Max normalization function
min_max_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
(x - min(x)) / (max(x) - min(x))
#apply Min-Max normalization to first four columns in iris dataset
iris_norm <- as.data.frame(lapply(iris[1:4], min_max_norm))
#view first six rows of normalized iris dataset
head(iris_norm)
# Example Data
x <- c(200, 600, 300, 800, 1000)
(x - min(x)) / (max(x) - min(x))
#define Min-Max normalization function
min_max_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
#apply Min-Max normalization to first four columns in iris dataset
normalize <- as.data.frame(lapply(x, min_max_norm))
#view first six rows of normalized iris dataset
head(normalize)
range01(x)
X<-normalize.vector(v)
normalize.vector(x)
# Example Data
x = sample(0:1, 200, 600, 300, 800, 1000)
# Example Data
test <- c(200, 600, 300, 800, 1000)
# Example Data
x = sample(0:1, test)
# Example Data
x = sample(-100:100, 50)
#Normalized Data
normalized = (x-min(x))/(max(x)-min(x))
# Histogram of example data and normalized data
par(mfrow=c(1,2))
hist(x,          breaks=10, xlab="Data",            col="lightblue", main="")
hist(normalized, breaks=10, xlab="Normalized Data", col="lightblue", main="")
# Example Data
test <- c(200, 600, 300, 800, 1000)
# Example Data
x = sample(test, 100)
# Example Data
test <- c(200, 600, 300, 800, 1000)
normalize(test, method = "standardize", range = c(0, 1), margin = 1L, on.constant = "quiet")
#   Load packages with pacman
pacman::p_load(pacman, dplyr, ggplot2,forecast, scico, rio, tidyverse, tidyr, normalize)
normalize(test, range = c(0, 1))
#   Load packages with pacman
pacman::p_load(pacman, dplyr, ggplot2,forecast, scico, rio, tidyverse, tidyr, textir)
normalize(test, range = c(0, 1))
#   Load packages with pacman
pacman::p_load(pacman, dplyr, ggplot2,forecast, scico, rio, tidyverse, tidyr, dplyr)
normalize(test, range = c(0, 1))
#   Load packages with pacman
pacman::p_load(pacman, dplyr, ggplot2,forecast, scico, rio, tidyverse, tidyr, dprep)
#   Load packages with pacman
pacman::p_load(pacman, dplyr, ggplot2,forecast, scico, rio, tidyverse, tidyr, BiocManager, dprep)
?scale
(x - min(x)) / (max(x) - min(x))
age = c(15, 18, 23, 35, 65)
(age - min(age)) / (max(age) - min(age))
# Example Data
x = c(200, 600, 300, 800, 1000)
(x - min(x)) / (max(x) - min(x))
#   Z-score normalization
scale(x)
(x-mean(x))/sd(x)
#   Min-max normalize data from 0min, 1max
(x - min(x)) / (max(x) - min(x))
(x - mean(x)) / sd(x)
#   Load packages with pacman
pacman::p_load(pacman, dplyr, ggplot2,forecast, scico, rio, tidyverse, tidyr, caret)
Scaler <- caret::preProcess(x, rangeBounds = c(-1,1),method = "range")
#   Normalize by decimal scaling
df <- data.frame(x)
Scaler <- caret::preProcess(df, rangeBounds = c(-1,1),method = "range")
ScaledData = predict(Scaler, df)
print(ScaledData)
#   Normalize by decimal scaling
formatC(as.numeric(x/1000), format = 'f', flag='0', digits = 3)
ageVector <- c(23, 24, 26, 27, 35, 42, 45, 49, 50, 52, 56, 56, 57, 59, 60, 61, 63, 64)
fatVector <- c(10.1, 26.4, 7.3, 18.4, 32.6, 24.5, 28.6, 27.2, 31.5, 35.4, 41.9, 27.6, 31.0, 30.7, 35.6, 42.1, 37.5, 36.8)
znorm-age = scale(ageVector)
znorm-fat = scale(fatVector)
#   Z-score normalization
znorm-age = scale(ageVector)
ageVector <- c(23, 24, 26, 27, 35, 42, 45, 49, 50, 52, 56, 56, 57, 59, 60, 61, 63, 64)
fatVector <- c(10.1, 26.4, 7.3, 18.4, 32.6, 24.5, 28.6, 27.2, 31.5, 35.4, 41.9, 27.6, 31.0, 30.7, 35.6, 42.1, 37.5, 36.8)
#   Z-score normalization
znorm_age = scale(ageVector)
znorm_fat = scale(fatVector)
?cor
cor(ageVector, fatVector)
cov(ageVector, fatVector)
cov(ageVector, fatVector) / (sd(ageVector)*sd(height))
cov(ageVector, fatVector) / (sd(ageVector)*sd(fatVector))
#   Correlation Coefficient
cor(ageVector, fatVector)   # 0.8085593
#   Covariance
cov(znorm_age, znorm_fat)   # 110.4863
#   Correlation Coefficient
cor(znorm_age, znorm_fat)   # 0.8085593
#   Covariance
cov(ageVector, fatVector)   # 110.4863
#   Covariance
cov(ageVector, fatVector)   # 110.4863
cov(ageVector, fatVector) / (sd(ageVector)*sd(fatVector))   # same as above
#   Z-score normalization
znorm_age = scale(ageVector)
znorm_fat = scale(fatVector)
print(znorm_age)
print(znorm_fat)
#   Normalize by decimal scaling
formatC(as.numeric(x/1000), format = 'f', flag='0', digits = 3)
hist(ageVector, breaks=10, main="Age Histogram")
hist(fatVector, breaks=10, main="Fat Histogram")
barplot(prop.table(table(ageVector, fatVector)),beside=T)
hist(ageVector, breaks=10, main="Age Histogram")
hist(fatVector, breaks=10, main="Fat Histogram", add=T)
#   Z-score normalization
scale(x)
(x - mean(x)) / sd(x)   # manually
#   Z-score normalization
scale(x)    # -1.13546718, 0.05976143, -0.83666003, 0.65737574, 1.25499004
#   Clear the console
cat("\014")   # command shortcut ctrl+L
#   Clear the console
cat("\014")   # command shortcut ctrl+L
#   Clear the console
cat("\014")   # command shortcut ctrl+L
#   Z-score normalization
scale(x)    # -1.13546718, 0.05976143, -0.83666003, 0.65737574, 1.25499004
(x - mean(x)) / sd(x)   # manually
#   Min-max normalize data from 0min, 1max
(x - min(x)) / (max(x) - min(x))
#   Normalize by decimal scaling
formatC(as.numeric(x/1000), format = 'f', flag='0', digits = 3)
#   Z-score normalization
znorm_age = scale(ageVector)
print(znorm_age)
D = data.frame(age = c(15, 18, 23, 35,65),height = c(160,172, 175, 172,178))
sub1 = sample(1:nrow(D),size = 2, replace = FALSE)D[sort(sub1),]
sub1 = sample(1:nrow(D),size = 2, replace = FALSE)
D[sort(sub1),]
# stratified sampling
D$strata = NAD$strata[D$age < 20] = 'youth'
D = data.frame(age = c(15, 18, 23, 35, 65),height = c(160, 172, 175, 172, 178))
sub1 = sample(1:nrow(D),size = 2, replace = FALSE)
D[sort(sub1),]
# stratified sampling
D$strata = NAD$strata[D$age < 20] = 'youth'
D$strata[D$age >= 20 & D$age < 60] = 'middle-aged'
# stratified sampling
D$strata = NA
D$strata[D$age < 20] = 'youth'
D$strata[D$age >= 20 & D$age < 60] = 'middle-aged'
D$strata[D$age > 60] = 'senior'
D$strata = factor(D$strata)
sub2 = sample(levels(D$strata),size = 1)D[D$strata == sub2,]
sub2 = sample(levels(D$strata),size = 1)
D[D$strata == sub2,]
sample.prop = function(x, prop){
n = round(length(x) * prop)  sample(x, n)
}
sample.prop = function(x, prop) {
n = round(length(x) * prop)
sample(x, n)
}
sub3 = by(1:nrow(D), INDICES = D$strata, FUN = sample.prop, prop = 2/nrow(D))
D[sort(unlist(sub3)),]
df = data.frame(age = c(15, 18, 23, 35, 65),height = c(160, 172, 175, 172, 178))
sub1 = sample(1:nrow(df),size = 2, replace = FALSE)
df[sort(sub1),]
# stratified sampling
df$strata = NA
df$strata[df$age < 20] = 'youth'
df$strata[df$age >= 20 & df$age < 60] = 'middle-aged'
df$strata[df$age > 60] = 'senior'
df$strata = factor(df$strata)
sub2 = sample(levels(df$strata),size = 1)
df[df$strata == sub2,]
sample.prop = function(x, prop) {
n = round(length(x) * prop)
sample(x, n)
}
sub3 = by(1:nrow(df), INDICES = df$strata, FUN = sample.prop, prop = 2/nrow(df))
df[sort(unlist(sub3)),]
#   Remove plots
dev.off()  # do only if a plot exists
hist(ageVector, breaks=10, main="Age Histogram")
# Make the histogram
ageVector %>%
ggplot( aes(x=age)) +
stat_bin(breaks=seq(0, 80, 10), fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("Age Histogram | Width of 10") +
theme_ipsum()
# Make the histogram
ageVector %>%
ggplot( aes(x=age)) +
stat_bin(breaks=seq(0, 80, 10), fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("Age Histogram | Width of 10") +
theme_ipsum()
ageVector %>%
ggplot( aes(x=age)) +
stat_bin(breaks=seq(0, 80, 10), fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("Age Histogram | Width of 10") +
theme_ipsum()
age_df <- data.frame(ageVector)
age_df %>%
ggplot( aes(x=age)) +
stat_bin(breaks=seq(0, 80, 10), fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("Age Histogram | Width of 10") +
theme_ipsum()
#   Load packages with pacman
pacman::p_load(pacman, dplyr, ggplot2,forecast, scico, rio, tidyverse, tidyr, hrbrthemes, caret)
age_df %>%
ggplot( aes(x=age)) +
stat_bin(breaks=seq(0, 80, 10), fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("Age Histogram | Width of 10") +
theme_ipsum()
age_df %>%
ggplot( aes(x=age)) +
stat_bin(breaks=seq(20, 80, 10), fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("Age Histogram | Width of 10") +
theme_ipsum()
View(age_df)
age_df %>%
ggplot( aes(x=age)) +
stat_bin(breaks=seq(20, 70, 10), fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("Age Histogram | Width of 10") +
theme_ipsum()
age_df %>%
ggplot( aes(x=age,  y, fill = x)) +
stat_bin(breaks=seq(20, 70, 10), fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("Age Histogram | Width of 10") +
theme_ipsum()
age_df %>%
ggplot( aes(x=age, fill = x)) +
stat_bin(breaks=seq(20, 70, 10), fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("Age Histogram | Width of 10") +
theme_ipsum()
hist(ageVector,
breaks=c(0, seq(20,70, 10)),
main="Age Histogram")
hist(ageVector,
breaks=c(10, seq(20,70, 10)),
main="Age Histogram")
hist(ageVector,
breaks=c(5, seq(10,80, 10)),
main="Age Histogram")
hist(ageVector,
breaks=c(10, seq(10,80, 10)),
main="Age Histogram")
hist(ageVector,
breaks=c(0, seq(20,70, 10)),
main="Age Histogram")
hist(fatVector,
breaks=c(0, seq(10,50, 10)),    # x starts at 0, shows values from 20-70 w/ a equal bin width of 10
main="Fat Histogram")
hist(fatVector,
breaks=c(0, seq(5,45, 10)),    # x starts at 0, shows values from 20-70 w/ a equal bin width of 10
main="Fat Histogram")
hist(fatVector,
breaks=c(0, seq(0,50, 10)),    # x starts at 0, shows values from 20-70 w/ a equal bin width of 10
main="Fat Histogram")
hist(fatVector,
breaks=c(0, seq(0,50, 10)),    # x starts at 0, shows values from 20-70 w/ a equal bin width of 10
main="Fat Histogram")
hist(fatVector,
breaks=c(0, seq(5,50, 10)),    # x starts at 0, shows values from 20-70 w/ a equal bin width of 10
main="Fat Histogram")
hist(fatVector,
breaks=c(0, seq(10,50, 10)),    # x starts at 0, shows values from 20-70 w/ a equal bin width of 10
main="Fat Histogram")
#   Use problem 3 data
df = data.frame(ageVector, fatVector)
sub1 = sample(1:nrow(df),size = 2, replace = FALSE)
df[sort(sub1),]
df$strata = NA
df$strata[df$age < 20] = 'youth'
df$strata[df$age >= 20 & df$age < 60] = 'middle-aged'
df$strata[df$age > 60] = 'senior'
df$strata = factor(df$strata)
sub2 = sample(levels(df$strata),size = 1)
df[df$strata == sub2,]
sample.prop = function(x, prop) {
n = round(length(x) * prop)
sample(x, n)
}
sub3 = by(1:nrow(df), INDICES = df$strata, FUN = sample.prop, prop = 2/nrow(df))
df[sort(unlist(sub3)),]
cluster1 = ageVector[c(ageVector <= 40)]
cluster1
cluster2 = ageVector[c(ageVector > 40 & ageVector <= 55  )]
cluster2
cluster3 = ageVector[c(ageVector > 55 & ageVector <= 60)]
cluster3
cluster4 = ageVector[c(ageVector > 60)]
cluster4
clusters = c(cluster1, cluster2, cluster3, cluster4)
clusters
random_clusters = sample(1:4, size = 2, replace = FALSE)
random_clusters
random_clusters = sample(1:3, size = 2, replace = FALSE)
random_clusters
random_clusters = sample(1,3, size = 2, replace = FALSE)
random_clusters = sample(1:4, size = 2, replace = FALSE)
random_clusters
group_1 = ageVector[c(ageVector <= 40)]
group_1
group_2 = ageVector[c(ageVector > 40 & ageVector <= 55  )]
group_1 = ageVector[c(ageVector<=40)]
group_1
group_2 = ageVector[c(ageVector>40 & ageVector<=55)]
group_2
group_3 = ageVector[c(ageVector>55 & ageVector<=60)]
group_3
group_4 = ageVector[c(ageVector>60)]
group_4
strat_sample_1 = sample(1:nrow(df),size = 2, replace = FALSE)
df[sort(strat_sample_1),]
df$strata = NA
df$strata[df$age < 20] = 'youth'
df$strata[df$age >= 20 & df$age < 60] = 'middle-aged'
df$strata[df$age > 60] = 'senior'
df$strata = factor(df$strata)
strat_sample_2 = sample(levels(df$strata),size = 1)
df[df$strata == strat_sample_2,]
sample.prop = function(x, prop) {
n = round(length(x) * prop)
sample(x, n)
}
sub3 = by(1:nrow(df), INDICES = df$strata, FUN = sample.prop, prop = 2/nrow(df))
df[sort(unlist(sub3)),]
group_1 = ageVector[c(ageVector<=40)]
group_1
group_2 = ageVector[c(ageVector>40 & ageVector<=55)]
group_2
group_4 = ageVector[c(ageVector>60)]
group_4
cluster_set = c(group_1, group_2, group_3, group_4)
cluster_set
#   ask for samples from the set the set and limit 2 results
select_sample = sample(1:4, size = 2, replace = FALSE)
select_sample
sampled = c(group_4, group_2)
sampled
hist(ageVector,
breaks=c(0, seq(20,70, 10)),    # x axis starts w/ 0, view values from 20-70 plot equal-widths of 10
main="Age Histogram")
hist(fatVector,
breaks=c(0, seq(10,50, 10)),    # x axis starts w/ 0, view values from 10-50 plot equal-widths of 10
main="Fat Histogram")
print(group_1)
print(select_sample)
print(sampled)
hist(ageVector,
#  x axis starts w/ 0, view values from 20-70 plot equal-widths of 10
breaks=c(0, seq(20,70, 10)),
main="Age Histogram")
df$strata = NA
df$strata[df$ageVector<30] = 'youth'
df$strata[df$ageVector>=30 & df$ageVector<60] = 'middle-aged'
df$strata[df$ageVector>60] = 'senior'
df$strata = factor(df$strata)
strat_sample_1 = sample(1:nrow(df),size = 2, replace = FALSE)
df[sort(strat_sample_1),]
#   Use problem 3 data
df = data.frame(p3_ageVector)
p3_ageVector <- c(23, 24, 26, 27, 35, 42, 45, 49, 50, 52, 56, 56, 57, 59, 60, 61, 63, 64)
#   Use problem 3 data
df = data.frame(p3_ageVector)
group_1 = p3_ageVector[c(p3_ageVector<=40)]
print(group_1)
group_2 = p3_ageVector[c(p3_ageVector>40 & p3_ageVector<=55)]
print(group_2)
group_3 = p3_ageVector[c(p3_ageVector>55 & p3_ageVector<=60)]
print(group_3)
cluster_set = c(group_1, group_2, group_3, group_4)
cluster_set
#   ask for tests from sets 1:4 and limit 2 results
select_sample = sample(1:4, size = 2, replace = FALSE)
print(select_sample)    # results are 4, 2
sampled = c(group_4, group_2)
print(sampled)
df$strata = NA
df$strata[df$p3_ageVector<30] = 'youth'
df$strata[df$p3_ageVector>=30 & df$p3_ageVector<60] = 'middle-aged'
df$strata[df$p3_ageVector>60] = 'senior'
df$strata = factor(df$strata)
strat_sample_1 = sample(1:nrow(df),size = 2, replace = FALSE)
df[sort(strat_sample_1),]
strat_sample_1 = sample(1:nrow(df),size = 5, replace = FALSE)
df[sort(strat_sample_1),]
strat_sample_2 = sample(levels(df$strata),size = 1)
df[df$strata == strat_sample_2,]
sample.prop = function(x, prop) {
n = round(length(x) * prop)
sample(x, n)
}
strat_sample_3 = by(1:nrow(df), INDICES = df$strata, FUN = sample.prop, prop = 2/nrow(df))
df[sort(unlist(strat_sample_3)),]
strat_sample_2 = sample(levels(df$strata),size = 5)
#   Clean environment
rm(list = ls())
#   Uninstall packages
p_unload(all)
#   Remove plots
dev.off()  # do only if a plot exists
#   Clear the console
cat("\014")   # command shortcut ctrl+L
p3_ageVector <- c(23, 24, 26, 27, 35, 42, 45, 49, 50,
52, 56, 56, 57, 59, 60, 61, 63, 64)
p3_fatVector <- c(10.1, 26.4, 7.3, 18.4, 32.6, 24.5, 28.6, 27.2, 31.5,
35.4, 41.9, 27.6, 31.0, 30.7, 35.6, 42.1, 37.5, 36.8)
#   Z-score normalization
znorm_age = scale(p3_ageVector)
print(znorm_age)
znorm_fat = scale(p3_fatVector)
print(znorm_fat)
#   Clear the console
cat("\014")   # command shortcut ctrl+L
#   Use problem 3 data
df = data.frame(p3_ageVector)
group_1 = p3_ageVector[c(p3_ageVector<=40)]
print(group_1)
group_2 = p3_ageVector[c(p3_ageVector>40 & p3_ageVector<=55)]
print(group_2)
group_3 = p3_ageVector[c(p3_ageVector>55 & p3_ageVector<=60)]
print(group_3)
group_4 = p3_ageVector[c(p3_ageVector>60)]
print(group_4)  #
cluster_set = c(group_1, group_2, group_3, group_4)
cluster_set
print(cluster_set)
sampled = c(group_4, group_2)
print(sampled)
df$strata = NA
df$strata[df$p3_ageVector<30] = 'youth'
df$strata[df$p3_ageVector>=30 & df$p3_ageVector<60] = 'middle-aged'
df$strata[df$p3_ageVector>60] = 'senior'
df$strata = factor(df$strata)
strat_sample_1 = sample(1:nrow(df),size = 5, replace = FALSE)
df[sort(strat_sample_1),]
strat_sample_2 = sample(levels(df$strata),size = 1)
df[df$strata == strat_sample_2,]
sample.prop = function(x, prop) {
n = round(length(x) * prop)
sample(x, n)
}
strat_sample_3 = by(1:nrow(df), INDICES = df$strata, FUN = sample.prop, prop = 2/nrow(df))
df[sort(unlist(strat_sample_3)),]
strat_sample_3 = by(1:nrow(df), INDICES = df$strata, FUN = sample.prop, prop = 5/nrow(df))
df[sort(unlist(strat_sample_3)),]
