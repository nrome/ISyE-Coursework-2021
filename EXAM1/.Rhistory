#   Load packages with pacman
#   classInt: bin depth or width,
pacman::p_load(pacman, classInt, arules, cluster)
#   Create vector - one dimension
p1_testScoreVector <- c(74, 68, 84, 80, 56, 64, 40, 47, 78, 71, 95, 50)
classIntervals(p1_testScoreVector, 4)
#   Equal Width binning
p1_equalWidth <- classIntervals(p1_testScoreVector, 4, style = 'equal')
print(p1_equalWidth)
#   Equal Frequency binning
p1_equalFrequency <- classIntervals(p1_testScoreVector, 4, style = 'quantile')
print(p1_equalFrequency)
#   Clear the console
cat("\014")   # command shortcut ctrl+L
print(p1_equalFrequency)
print(p1_equalWidth)
#   Clear the console
cat("\014")   # command shortcut ctrl+L
#   Equal Frequency binning
p1_equalFrequency <- classIntervals(p1_testScoreVector, 4, style = 'quantile')
print(p1_equalFrequency)
#   Equal Width binning
p1_equalWidth <- classIntervals(p1_testScoreVector, 4, style = 'equal')
print(p1_equalWidth)
dataset = matrix(c(2000,1000,500,1500), ncol = 2)
colnames(dataset) = c('HOTDOGS','NO-HOTDOGS')
rownames(dataset) = c('BURGERS','NO-BURGERS')
dataset
#   Calculate Chi Square
chisq.test(dataset, correct=FALSE)
#   Clear the console
cat("\014")   # command shortcut ctrl+L
dataset = matrix(c(250,600,750,8400), ncol = 2)
colnames(dataset) = c('BEER','NO-BEER')
rownames(dataset) = c('NUTS','NO-NUTS')
dataset
#   Calculate Chi Square
chisq.test(dataset, correct=FALSE)
#   Clear the console
cat("\014")   # command shortcut ctrl+L
dissimilarity_matrix = data.frame(test1 = c('Code-A','Code-A','Code-B','Code-C'),
test2 = c('Code-I','Code-I','Code-II','Code-II'),
test3 = c('Excellent','Fail','Fail','Pass'),
test4 = c(80, 20, 100, 60))
dissimilarity_matrix$test1 = as.factor(dissimilarity_matrix$test1)
dissimilarity_matrix$test2 = as.factor(dissimilarity_matrix$test2)
dissimilarity_matrix$test3 = ordered(dissimilarity_matrix$test3, levels = c('Fail','Pass','Excellent'))
dissimilarity_matrix$test4 = as.numeric(dissimilarity_matrix$test4)
daisy(dissimilarity_matrix)
#   Clear the console
cat("\014")   # command shortcut ctrl+L
p4.Db = list(c("C","F","A","E","D","H"),
c("H","A","B","C"),
c("D","E","C","B"),
c("C","A","G","D","B"),
c("A","H","G","C"))
#   convert to TID-itemset format (transaction)
p4.Db = as(p4.Db,'transactions')
# display the dataset
inspect(p4.Db)
p4.FreqItems = apriori(p4.Db, parameter = list(support = 0.6, target = "frequent itemsets"))
inspect(p4.FreqItems)
# Closed Frequent Patterns
inspect(p4.FreqItems[is.closed(p4.FreqItems)])
# Maximal Frequent Patterns
inspect(p4.FreqItems[is.maximal(p4.FreqItems)])
p4.AssocRules = apriori(p4.Db, parameter = list(support = 0.6, confidence = 0.8, target = "rules"))
#   Get last Left Hand Side with two attributes
inspect(p4.AssocRules)
#   Clear the console
cat("\014")   # command shortcut ctrl+L
inspect(p4.FreqItems)
# Closed Frequent Patterns
inspect(p4.FreqItems[is.closed(p4.FreqItems)])
# Maximal Frequent Patterns
inspect(p4.FreqItems[is.maximal(p4.FreqItems)])
#   Get last Left Hand Side with two attributes
inspect(p4.AssocRules)
#   Clear the console
cat("\014")   # command shortcut ctrl+L
inspect(p4.FreqItems)
# Closed Frequent Patterns
inspect(p4.FreqItems[is.closed(p4.FreqItems)])
# Maximal Frequent Patterns
inspect(p4.FreqItems[is.maximal(p4.FreqItems)])
inspect(p4.AssocRules)
